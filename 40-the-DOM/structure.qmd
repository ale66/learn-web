---
title: "Learn Web"
author: "ale66"
format: 
  revealjs:
    footer: "[github.com/ale66/learn-web](https://github.com/ale66/learn-web)&nbsp;&nbsp;&nbsp;"
    theme: [moon]
    transition: slide
    preview-links: auto
    chalkboard: 
      boardmarker-width: 5
from: markdown+emoji
execute:
  echo: true
---

# Structure


---

## Important properties

Whereas rendered pages are normally related to a linear, left-to-right, top-down reading, browsers see pages as *trees*

Biological tree: one *root* element at the bottom which splits up repeatedly in smaller and smaller branches; leaves at the top


---

HTML tree: flipped upside down

a single root element at the top

branching out into several smaller elements, some of which are siblings


---

## Parsing

Automated reading of a formal (code) file with *recognition* of the commands

HTML branch tags must be strictly contained into their *root*

are mistyping can throw the automated parsing off track


---


```html
<!doctype html>
```

This is not HTML but a directive (via the `!`) 

the browser (and the operating system and the network services running below it) will know how to handle it.

. . . 

```html
<!doctype html>
<html lang="en">
  ...
</html>
```

---

Mandatory: one root with two branches

::::::: {.columns}
::: {.column}
```html
<!doctype html>

<html lang="en">
  <head></head>
  <body></body>
</html>
```
:::
::: {.column}
```{mermaid}
%%| echo: false
flowchart TD
  A[html] --> B[head]
  A[html] --> C[body]

```
:::
:::::::

---

One root, two branches and two leaves

::::::: {.columns}
::: {.column}
```html
<!doctype html>

<html>
  <head>
    <title>My DOM page</title>
  </head>
  <body>
    <h1>Visible title</h1>
    <p>First para</p>
  </body>
</html>
```
:::
::: {.column}
```{mermaid}
%%| echo: false
flowchart LR
  A[html] --> B[head] & C[body]
  B --> D[title]
  C --> E[h1] & F[p]
```
:::
:::::::

---

::::::: {.columns}
::: {.column}
```html
<html>
  <head>
    <title>My DOM page</title>
  </head>
  <body>
    <h1>Visible title</h1>
    <p>First para.</p>
    <p>More text.</p>
    <p>Further text.</p>
...
```
:::
::: {.column}
```{mermaid}
%%| echo: false
flowchart LR
  A[html] --> B[head] & C[body]
  B --> D[title]
  C --> E[h1] & F[p] & G[p] & H[p]
```
:::
:::::::

---

Browsers process each tag as a *path* from root to the respective leaf:

```html
<html><body><h1>Visible title</h1>
```

```html
<html><Body><p>First para</p>
```

Additionally, leaves may be assigned an `id` name:

```html
<html><body><p id="top-para">First para.</p>
```

And so on:

```html
<html><body><p id="middle-para">More text</p>

<html><body><p id="bottom-para">Further text.</p>
```

---

Next, all the needed CSS command will be picked up from the CSS file and attached to the element

```html
<html><body><h1 class="my_hero_title">My big, fat title</h1>
```

Where the CSS contains:

```css
.my_hero_title {
  font-color: darksalmon;
  ...
}
```

Free choice of class names but they must be unique

---

## How browers actually see our page 

```{mermaid}
%%| echo: false
flowchart LR
  A[html] --> B[head] & C[body]
  B --> D[title]
  C --> E[h1] & F[p] & G[p] & H[p]
  E-.-> I[.my-hero-title]
```


# The DOM 

---

## Document Object model

each HTML page has an associated *tree* representation with tags and class names

the tree representation guides the writing of JavaScript (JS) programs that can manipulate the structure of the page 

and how it looks to, e.g., classes of users

__We study the DOM to make pages come alive__

Try the *red background* example on Sec. 1.1 of [dom.spec.whatwg.org/](https://dom.spec.whatwg.org/) 

---

## Exercise: view the DOM of your own pages

Take your own Lorem project and feed it to DOM visualisers on GH:

[codu-code.github.io/dom-visualizer/](https://codu-code.github.io/dom-visualizer/index.html)

[bioub.github.io/dom-visualizer/](http://bioub.github.io/dom-visualizer/)

Try again with your favourite CSSengarden project

---

## Represent content


```{mermaid}
%%| echo: false
flowchart LR
  A[html] --> B[head] & C[body]
  B --> D[title]
  C --> E[h1] & F[p] & G[p] & H[p]
  E-.-> I[.my-hero-title]
```

inside most tags there is content to be displayed.

Such content is represented as an explicit DOM leaf

---

##

```{mermaid}
%%| echo: false
flowchart LR
  A[html] --> B[head] & C[body]
  B --> D[title]
  C --> E[h1] & F[p] & G[p] & H[p]
  E-.-> I[.my-hero-title]
  D --> L[My DOM page]
  E --> M[My visible title]
  F --> N[some text]
  G --> O[more text]
  H --> P[further text]
```

for each leaf, a special `innerHTML` variable will contain the relative text and mark-up

---

A complete DOM

```{mermaid}
%%| echo: false
flowchart TD
  A[html] --> B[head] & C[body]
  B --> D[title]
  C --> E[h1] & F[p] & G[p] & H[p]
  E-.-> I[.my-hero-title]
  D --> L[My DOM page]
  E --> M[My visible title]
  F --> N[some text]
  F-.-> Q[.my-p-style]
  G --> O[more text]
  G-.-> Q
  H --> P[further text]
  H-.-> Q
```

Javascript code takes this representation and change it as the bruwser *runs* the page