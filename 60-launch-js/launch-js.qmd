---
title: "Learn Web"
author: "ale66"
format: 
  revealjs:
    footer: "[github.com/ale66/learn-web](https://github.com/ale66/learn-web)&nbsp;&nbsp;&nbsp;"
    theme: [moon]
    preview-links: auto
    chalkboard: 
      boardmarker-width: 2
    mermaid:
      theme: forest
      fontSize: 12
from: markdown+emoji
execute:
  echo: true
---

# Launching JS

--- 

## Review

- JS is the programming language that runs 'inside' web pages
  
- it can access and change all details of the page at *rendering time*

- access is through the DOM notation: `document.GetElamentById('demo').innerHtml`

Let's review how JS changes the page, one element at a time

---


## Change text

```js
document.getElementById("demo").innerHTML = 'My 2nd JS experiment';
```

Element `demo` could be an `h1` or a `p` or a `div` etc.


---

## Change style

```js
document.getElementById('myPara').style.fontSize = "30px";
```

Now text is bigger

---

## Redefine elements of the page with JS

```js
const my_restyled_para = document.getElementById('myPara');

my_restyled_para.textContent = "My third JS experimen!"

my_restyled_para.style.fontSize = "30px";
```

use the VS Code command-completion facility to know what parameters are available

---

```js
document.getElementById("demo").textContent = 'My 2nd JS experiment';
```

only changes text, no HTML


```js
document.getElementById("demo").innerHTML = 'My 2nd JS <it>experiment</it>';
```

Can insert HTML and force a re-rendering of the page

---

## Change any property of the named tag

```html
<img id="myImage" src="./imgs/winter.jpg" width="200" alt="Start pic">
```

As season change, we change the images. 


```js
document.getElementById('myImage').src = "./imgs/summer.jpg"
```
Important: the new file must be reachable from the page, or we will spoil the existing rendering

![](./imgs/summer.jpg)



# JS controls the page


---

JS functions can *get* the document they're in

With JS commands of type

```js
document.func()
```

we apply function `func()` to the whole document

The browser will run `func()` when encounters it in the process of rendering the page or of running a JS function call


## JS page activation


JS code can change a hidden parameter, common to all tags, that controls *visibility* 

Hence, we control which parts are shown at each stage of the visit

An extreme case: `document.write()` will wipe out the page and rewrite it from scratch; changes are irreversible

---

```js
window.alert('A message to be seen')
```

a gentle way to get users' attention 

useful in *debugging* code:

when the behaviour differs from expected, we can execute step-by-step and check what values are stored into variables

`window.print()` is for printing on paper :smile:

here `window`, `window.document` and `document` are interchangeable

For reference: document-level functions at [w3schools](https://www.w3schools.com/jsref/dom_obj_document.asp)


#  Starting JS

---

- today, pages are often created *client-side:* 
  - the browser gets a simple page + lots of JS code
  - it runs the code to obtain the finished page
 
- in fact, JS execution can account for *layers* of personalisation (geo, tiee and cookies) that can only be descided at rendering time

. . .

- JS code can be put in several places inside the page

- placement may negatively affect readability of the page

- it also changes what is available to JS


---

## Two ways to start

JS functions execute 

- automatically, when the browser loads and renders the page

- in response to user's input, given through buttons, menus etc.

We mostly study JS through the latter


---

## JS: where to put it?

a short list of commands, separated by `;` cna be placed almost everywhere

please the [w3schools.com/js/js_whereto.asp](https://www.w3schools.com/js/js_whereto.asp)

Cleanest solution: 

- put JS functions inside .js files

- keep those in a local folder called, e.g., `JS` of `Scrips`  


# A platform for learning


---

Learning programming languages is much like learning foreign human languages: theory and practice 

Python: interpreter, VS Code with lots of extensions, code profiler, problem-solvinng challenges etc.

JS: VS Code, refresh page in the browser, not much else... 

JS does not have an input/output behaviour *per se* 

[w3schools.com/js/js_output.asp](https://www.w3schools.com/js/js_output.asp)


---

## The browser console

Firefox: [Ctrl + Shift + k](https://developer.mozilla.org/en-US/docs/Tools/Web_Console/Opening_the_Web_Console)

Chromium: [Ctrl + Shift + j](https://developers.google.com/web/tools/chrome-devtools/console)


# Challenge

---

can you personalise the title of your page? 

I.e., write a JS function which changes the title of the page, e.g., inserting the date when the page has been loaded?

Hint: study the [title](https://www.w3schools.com/jsref/prop_doc_title.asp) function

Thanks to the DOM we can write a 1-line function then invoke it in the `<script>` part at the bottom.


---

## Exercise:  

MA COM is outsourced to the new *University of S. Babila*

__Challenge:__ can you change all the links in a page from the base ``www.unimi.it`` to ``www.unibabila.it``?

![](./src/imgs/homework2final.png)


---

to get ready for the challenge cover the following units first:

[getElementById()](https://www.w3schools.com/jsref/met_document_getelementbyid.asp)

[links()](https://www.w3schools.com/jsref/coll_doc_links.asp)


---

## Advanced:

[getElementsByClassName()](https://www.w3schools.com/jsref/met_document_getelementsbyclassname.asp)

requires handling a __collection__ of HTML elements.
Proceed if you are familiar with lists or arrays in any programming language.

---

## Further topics

Analise the [WaterCSS](https://watercss.netlify.app/) CSS generator.

Use [Markdown](https://gist.github.com/cuonggt/9b7d08a597b167299f0d) to format your instructions.


## A note about learning

Please do not 

- watch YouTube videos as they might slow down/comfuse/hinder your learning

- prompt ChatGPT and similar as you (probably) won't learn anything

. . .

Please do use *active learning* web sites such as 

- [wdpg.io]()
- [w3schools.com/html](https://www.w3schools.com/html/default.asp) 
- [w3schools.com/css](https://www.w3schools.com/css/default.asp) 
- [w3schools.com/js](https://www.w3schools.com/js/default.asp) 

