---
title: "Learn Web"
author: "ale66"
format: 
  revealjs:
    footer: "[github.com/ale66/learn-web](https://github.com/ale66/learn-web)&nbsp;&nbsp;&nbsp;"
    theme: [moon]
    preview-links: auto
    chalkboard: 
      boardmarker-width: 5
    mermaid:
      theme: forest
from: markdown+emoji
execute:
  echo: true
---

# Structure


---

## Important properties

Whereas rendered pages are normally related to a linear, left-to-right, top-down reading, browsers see pages as *trees*

Biological tree: one *root* element at the bottom which splits up repeatedly in smaller and smaller branches; leaves at the top


---

HTML tree: flipped upside down

a single root element at the top

branching out into several smaller elements, some of which are siblings


---

## Parsing

Automated reading of a formal (code) file with *recognition* of the commands

HTML branch tags must be strictly contained into their *root*

are mistyping can throw the automated parsing off track


---


```html
<!doctype html>
```

This is not strictly HTML and it is read by the OS under the browser

---

```html
<!doctype html>

<html lang="en">
</html>
```

---

One root, two branches

```html
<!doctype html>

<html>
  <head></head>
  <body></body>
</html>
```

This part is mandatory

```{mermaid}
%%| echo: false
flowchart LR
  A[html] --> B[head] & C[body]
```

---

```html
<!doctype html>

<html>
  <head>
    <title>Title here</title>
  </head>
  <body>
    <h1>Visible title</h1>
    <p>Text</p>
  </body>
</html>
```

One root, two branches and two leaves

```{mermaid}
%%| echo: false
flowchart LR
  A[html] --> B[head] & C[body]
  B --> D[title]
  C --> E[h1] & F[p]
```


---

```html
<html>
  <head>
    <title>Title here</title>
  </head>
  <body>
    <h1>Visible title</h1>
    <p>Text</p>
    <p>More text</p>
    <p>Another text</p>
    <p>Further text</p>
...
```

```{mermaid}
%%| echo: false
flowchart LR
  A[html] --> B[head] & C[body]
  B --> D[title]
  C --> E[h1] & F[p] & G[p] & H[p]
```


---

Browsers process tags as *paths* from root to leaf:

```html
<html><head><h1>Title</h1>
```

```html
<html><head><p>Text</p>
```

Each leaf, or *unit of text* will be uniquely identified

Next, all the needed CSS command will be picked up from the CSS file and attached to the element

```html
<html><head><h1 class="my-hero-title">Title</h1>
```

```css
.my-hero-title {
  font-color: darksalmon;
  ...
}
```

Free choice of class names, but they must also be unique


---

## How browers actually see our page 


```{mermaid}
%%| echo: false
flowchart LR
  A[html] --> B[head] & C[body]
  B --> D[title]
  C --> E[h1] & F[p] & G[p] & H[p]
  E-.-> I[my-hero-title]
```




# The DOM 


---

## Document Object model

each HTML page has an associated *tree* representation with tags and class names

the tree representation guides the writing of JavaScript (JS) programs that can manipulate the structure of the page 

and how it looks to, e.g., classes of users

We study the DOM to manipulate pages 
